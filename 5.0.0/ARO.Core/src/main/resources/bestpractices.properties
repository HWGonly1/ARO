bestPractice.header=BEST PRACTICES

statics.csvUnits.mbytes=MBytes

caching.duplicateContent.title=File Download: Duplicate Content
caching.duplicateContent.detailedTitle=Duplicate Content
caching.duplicateContent.desc=This test measures duplicate content. Excess duplicate content means that content was downloaded multiple times, which leads to slower applications and wasted bandwidth.
caching.duplicateContent.results=Your trace had {0}% duplicated TCP content. By reducing the&nbsp;<a href="#">duplicate content</a>&nbsp;({1} items, {2} M of {3}M total TCP content), your application will appear faster to your customers.
caching.duplicateContent.pass=Your trace passes with an acceptable level of duplicate content. Your trace had less than 3 duplicate items downloaded.
caching.duplicateContent.url=http://developer.att.com/ARO/BestPractices/DuplicateContent

caching.usingCache.title=File Download: Cache Control
caching.usingCache.detailedTitle=Cache Control
caching.usingCache.desc=This test measures the presence of cache headers. For all content that should be stored in the cache the best practice is to make sure that your server is adding the appropriate cache headers.
caching.usingCache.results=ARO detected the absence of&nbsp;<a href="#">cache headers</a>&nbsp;{0}% of times.  Cache headers prevent your files from being downloaded in a duplicate manner.
caching.usingCache.pass=Your data is populated with cache headers and it passes this test.
caching.usingCache.url=http://developer.att.com/ARO/BestPractices/UsingCache

caching.cacheControl.title=File Download: Content Expiration
caching.cacheControl.detailedTitle=Content Expiration
caching.cacheControl.desc=This test compares the number of "304 not modified" requests versus files that should be cached but were downloaded multiple times. 
caching.cacheControl.results=Your trace contained {0} duplicate files with&nbsp;"<a href="#">not expired</a>"&nbsp;cache headers and received {1}&nbsp;<a>304 responses</a>&nbsp;for expired files.
caching.cacheControl.pass=It appears that content expiration is being handled properly. No caching issues were detected in this trace and it passes this test.
caching.cacheControl.url=http://developer.att.com/ARO/BestPractices/CacheControl

caching.prefetching.title=File Download: Content Pre-fetching
caching.prefetching.detailedTitle=Content Pre-fetching
caching.prefetching.desc=This test measures multiple user input bursts all in a row. Prefetching may help speed up an app in these situations. Downloading files "as needed" can slow the user experience. If a user scrolls through the main screen of your application and has to wait for images to load, the application appears slow.
caching.prefetching.results=ARO detected {0} user input&nbsp;<a href="#">bursts</a>&nbsp;in a row. Consider pre-fetching your data (downloading all at once) to reduce the time your application is connected to the network.
caching.prefetching.pass=The files in this trace seem to be downloaded in reasonable bursts, and it passes this test. Remember that this may need to change as user behavior changes.
caching.prefetching.url=http://developer.att.com/ARO/BestPractices/Prefetching

connections.connectionOpening.title=Connections: Connection Opening
connections.connectionOpening.detailedTitle=Connection Opening
connections.connectionOpening.desc=This test helps ensure connections are opened properly. Some connection startups consists of an input burst, followed by a series of bursts spread out over time which can dramatically slow down the application's response time and waste energy on the device.  This is a self test.
connections.connectionOpening.selfEvaluation=If you see many application-initiated bursts, consider a transaction manager to group these more closely together.
connections.connectionOpening.url=http://developer.att.com/ARO/BestPractices/OpeningConnections

connections.unnecssaryConn.title=Connections: Unnecessary Connections - Multiple Simultaneous Connections
connections.unnecssaryConn.detailedTitle=Unnecessary Connections - Multiple Simultaneous Connections
connections.unnecssaryConn.desc=This test measures bursts that could be more tightly grouped. Syncing all of your data connections can help reduce the amount of time your application is on the network, reducing the battery drain. That will also make your content appear to load faster to the user.
connections.unnecssaryConn.results={0} sets of&nbsp;<a href="#">bursts</a>&nbsp;that could be more tightly grouped.
connections.unnecssaryConn.pass=It appears that the data in this trace is grouped together well, and it passes this test.
connections.unnecssaryConn.url=http://developer.att.com/ARO/BestPractices/TCPConnections

connections.periodic.title=Connections: Inefficient Connections - Periodic Transfers
connections.periodic.detailedTitle=Inefficient Connections - Periodic Transfers
connections.periodic.desc=This test helps ensure that your periodic connections are truly needed for the customer, which if not handled properly could cause excessive power drain.
connections.periodic.results=There were {0} different&nbsp;<a href="#">connections</a>&nbsp;which were repeated a total of {1} times with a minimum repeat time of {2} seconds.
connections.periodic.result=There was {0} different&nbsp;<a href="#">connection</a>&nbsp;which was repeated a total of {1} times with a minimum repeat time of {2} seconds.
connections.periodic.pass=No periodic transfers were detected in this trace.  It may be worthwhile to look for connections that happened regularly, but are not at exact intervals.  This can cause excessive battery drain.
connections.periodic.url=http://developer.att.com/ARO/BestPractices/PeriodicTransfers

connections.screenRotation.title=Connections: Inefficient Connections - Screen Rotation
connections.screenRotation.detailedTitle=Inefficient Connections - Screen Rotation
connections.screenRotation.desc=This test tracks screen rotation, to see if the app is pinging the server on orientation changes, or actually completely retransmit content.  If you see this in your trace - consider a new layout for existing content (rather than re-download) or sending the orientation change later as a part of a larger data transmission.
connections.screenRotation.results=After rotating the screen, we detected a network traffic&nbsp;<a href="#">burst</a>.  Consider reusing the content you have already downloaded in the previous layout, rather than downloading again.
connections.screenRotation.pass=Either no screen rotations were noted or the screen rotations did not trigger network activity.
connections.screenRotation.url=http://developer.att.com/ARO/BestPractices/ScreenRotations

connections.connClosing.title=Connections: Inefficient Connections - Connection Closing Problems
connections.connClosing.detailedTitle=Inefficient Connections - Connection Closing Problems
connections.connClosing.desc=This test checks that connections are closed promptly. If not effectively closed with the last data, the server timeout can turn the radio on just to close your connections, which wastes power and bandwidth.
connections.connClosing.results=ARO detected that {0} Joules ({1}% of the total energy) was used to control these&nbsp;<a href="#">connections</a>. By closing connections promptly, you will reduce battery drain.
connections.connClosing.pass=Connections appear to be closed promptly in this trace, and it passes this test.
connections.connClosing.url=http://developer.att.com/ARO/BestPractices/ClosingConnections

connections.offloadingToWifi.title=Connections: Inefficient Connections - Offloading to WiFi when Possible
connections.offloadingToWifi.detailedTitle=Inefficient Connections - Offloading to WiFi when Possible
connections.offloadingToWifi.desc=This test is a check to see if you are transmitting large chunks of data. When this occurs you may consider offloading to WiFi when appropriate.
connections.offloadingToWifi.results=ARO detected {0} large&nbsp;<a href="#">bursts</a>&nbsp;with high amounts of data in your trace.
connections.offloadingToWifi.pass=There were not many large bursts of data seen in this trace, and it passes this test.
connections.offloadingToWifi.url=http://developer.att.com/ARO/BestPractices/WifiOffload

connections.http4xx5xx.title=Connections: 400, 500 HTTP Status Response Codes
connections.http4xx5xx.detailedTitle=400, 500 HTTP Status Response Codes
connections.http4xx5xx.desc=HTTP status response codes in the 4xx range indicate a client request error, and 5xx codes indicate a server error.  There should be zero such errors in your application.
connections.http4xx5xx.errorSingular=1&nbsp;<a href="{0}">{0}</a>&nbsp; status response
connections.http4xx5xx.errorPlural={0}&nbsp;<a href="{1}">{1}</a>&nbsp;status responses
connections.http4xx5xx.errorList={0}, {1}
connections.http4xx5xx.errorListEnd={0} and {1}
connections.http4xx5xx.results=ARO detected {0} during the trace.
connections.http4xx5xx.pass=No 4xx or 5xx HTTP status response codes were detected during the trace.
connections.http4xx5xx.url=http://developer.att.com/ARO/BestPractices/HTTPcodes
connections.http4xx5xx.table.col1=Time
connections.http4xx5xx.table.col2=Domain Name
connections.http4xx5xx.table.col3=File Name
connections.http4xx5xx.table.col4=HTTP Code
connections.http4xx5xx.table.header=400,500 HTTP Status Response Codes

connections.http3xx.title=Connections: 301, 302 HTTP Status Response Codes
connections.http3xx.detailedTitle=301, 302 HTTP Status Response Codes
connections.http3xx.desc=Redirects are an easy way to switch users to different versions of your data. However, redirects also add significant latency to your application. Use with care.
connections.http3xx.errorSingular=1&nbsp;<a href="{0}">{0}</a>&nbsp;status response
connections.http3xx.errorPlural={0}&nbsp;<a href="{1}">{1}</a>&nbsp;status responses
connections.http3xx.errorList={0}, {1}
connections.http3xx.errorListEnd={0} and {1}
connections.http3xx.results=ARO detected {0} during the trace.
connections.http3xx.pass=No 301 or 302 HTTP status response codes were detected during the trace.
connections.http3xx.url=http://developer.att.com/ARO/BestPractices/300HTTPcodes
connections.http3xx.table.col1=Time
connections.http3xx.table.col2=Domain
connections.http3xx.table.col3=HTTP Code
connections.http3xx.table.col4=File Name
connections.http3xx.table.header=Files

other.accessingPeripherals.title=Other: Accessing Peripheral Applications
other.accessingPeripherals.detailedTitle=Accessing Peripheral Applications
other.accessingPeripherals.desc=This test reviews accessing device hardware applications like cameras, GPS, Bluetooth, speakers and WiFi, which can drain the battery. That's not a problem if your app is utilizing those peripherals, but many apps access peripherals they never utilize.
other.accessingPeripherals.results=During your trace,&nbsp;<a href="#">GPS</a>&nbsp;was active for {0}% of the time.&nbsp;<a href="#">Bluetooth</a>&nbsp;was active for {1}% of the time.&nbsp;<a href="#">Camera</a>&nbsp;was active for {2}% of the time.
other.accessingPeripherals.pass=Peripherals appear to be managed properly. Trace shows GPS was active for {0}% of the time. Bluetooth was active for {1} % of the time. Camera was active for {2} % of the time.
other.accessingPeripherals.url=http://developer.att.com/ARO/BestPractices/Peripherals

html.httpUsage.title=HTML: HTTP 1.0 Usage
html.httpUsage.detailedTitle=HTTP 1.0 Usage
html.httpUsage.desc=This test is just review to make sure you are using HTTP 1.1, which allows multiple items to be downloaded per connection, which is more efficient for your app.
html.httpUsage.results=ARO detected {0} HTTP 1.0&nbsp;<a href="#">headers</a>.
html.httpUsage.pass=ARO detected {0} HTTP 1.0 headers, and it passes this test.
html.httpUsage.url=http://developer.att.com/ARO/BestPractices/HTTP1.0

html.asyncload.title=HTML: Asynchronous Load of JavaScript in HTML
html.asyncload.detailedTitle=Asynchronous Load of JavaScript in HTML
html.asyncload.desc=JavaScript loading blocks parallel downloads, and files downloaded in the HEAD of your HTML will block the rendering of your HTML. If you must load JavaScript in the HEAD load asynchronously.
html.asyncload.results=ARO discovered {0} HTML files that use synchronous load of JavaScript in the HEAD.
html.asyncload.pass=ARO discovered {0} HTML files loaded synchronously and it passes the test.
html.asyncload.url=http://developer.att.com/ARO/BestPractices/loadJSasynchronously
html.asyncload.table.header=Synchronous Loaded Files
html.asyncload.table.col1=Time
html.asyncload.table.col2=Host Name
html.asyncload.table.col3=File Name

html.fileorder.title=HTML: File Order
html.fileorder.detailedTitle=File Order
html.fileorder.desc=In the HEAD of your HTML, CSS files should always be loaded before JS files to ensure faster loading of your website. 
html.fileorder.singresults=ARO discovered {0} HTML file where JS is loaded immediately before CSS.
html.fileorder.pluresults=ARO discovered {0} HTML files where JS is loaded immediately before CSS.
html.fileorder.pass=ARO discovered 0 HTML file where JS is loaded immediately before CSS.
html.fileorder.url=http://developer.att.com/ARO/BestPractices/FileOrder
html.fileorder.table.header=Files where JS is loaded before CSS
html.fileorder.table.col1=Time
html.fileorder.table.col2=Host Name
html.fileorder.table.col3=File Name

html.displaynoneincss.title=HTML: "display:none" in CSS
html.displaynoneincss.detailedTitle="display:none" in CSS
html.displaynoneincss.desc=The CSS rule "display:none" is used to hide html objects from being shown on a page. However, this does not prevent the objects from being downloaded to the mobile device.  These extra objects (that are never displayed to the user), will slow down your app and waste data. 
html.displaynoneincss.results=ARO discovered {0} files with CSS command "display:none".
html.displaynoneincss.pass=ARO discovered {0} files with no CSS rule "display:none" and it passes the test.
html.displaynoneincss.url=http://developer.att.com/ARO/BestPractices/displaynoneCSS
html.displaynoneincss.table.header=Files having CSS rule "display:none"
html.displaynoneincss.table.col1=Time
html.displaynoneincss.table.col2=File Name



textFileCompression.title=File Download: Text File Compression
textFileCompression.detailedTitle=Text File Compression
textFileCompression.desc=Sending compressed files over the network will speed delivery, and unzipping files on a device is a very low overhead operation. Ensure that all your text files are compressed while being sent over the network.
textFileCompression.results=ARO detected {0} KB of text files were sent without compression. Adding compression will speed the delivery of your content to your customers. (Note: Only files larger than {1} bytes are flagged.)
textFileCompression.pass=ARO detected 0 text files above {0} bytes were sent without compression. Adding compression will speed the delivery of your content to your customers. (Note: Only files larger than {1} bytes are flagged.)
textFileCompression.url=http://developer.att.com/ARO/BestPractices/TextFileCompression
textFileCompression.table.header=Uncompressed Files 
textFileCompression.table.col1=Time
textFileCompression.table.col2=Host Name
textFileCompression.table.col3=File Size
textFileCompression.table.col4=File Name

imageSize.title=File Download: Resize Large Images for Mobile
imageSize.detailedTitle=Resize Large Images for Mobile
imageSize.desc=Images that are not correctly sized for mobile can cause extreme delays in rendering.  Before delivering content to a mobile, resize it to fit the available area.
imageSize.results=ARO detected {0} image files that are 110% larger than the area specified for them. Consider resizing these images before delivering to the device.
imageSize.pass=Your trace passes. There are no image files that are 110% larger than the area specified for them.
imageSize.url=http://developer.att.com/ARO/BestPractices/ResizeMobileImages
imageSize.table.header=Image Files 
imageSize.table.col1=Time
imageSize.table.col2=Host Name
imageSize.table.col3=Image Size
imageSize.table.col4=Image Name

minification.title=File Download: Minify CSS, JS, JSON and HTML
minification.detailedTitle=Minify CSS, JS, JSON and HTML
minification.desc=Many text files contain excess whitespace to allow for better human coding. Run these files through a minifier to remove the whitespace in order to reduce file size.
minification.results=ARO detected {0} files that could be shrunk through minification, resulting in {1} kB ({2} bytes) savings.
minification.pass=Your trace passes.
minification.url=http://developer.att.com/ARO/BestPractices/Minification
minification.table.header=Files 
minification.table.col1=Time
minification.table.col2=Host Name
minification.table.col3=Saving [%]
minification.table.col4=Saving [B]
minification.table.col5=File Name

empty.url.title=HTML: Empty Source and Link Attributes
empty.url.detailedTitle=Empty Source and Link Attributes
empty.url.desc=Many browsers still attempt to connect even if there is no url. This can cause delays in loading your site.
empty.url.results=<a href="#">{0}</a>&nbsp;files had HTML iframe, img, href, script, or link tags. 
empty.url.pass=Your trace passes.
empty.url.url=http://developer.att.com/ARO/BestPractices/EmptyHTMLTags

flash.title=HTML: FLASH
flash.detailedTitle=FLASH
flash.desc=Android and iOS platforms do not support Flash, therefore your content is unreadable to your users. Consider using an HTML5 video player instead.
flash.results=ARO discovered <a href="#">{0}</a>&nbsp;instances of Flash content. 
flash.pass=Your trace passes.
flash.url=http://developer.att.com/ARO/BestPractices/Flash

3rd.party.scripts.title=Connections: 3rd Party Scripts
3rd.party.scripts.detailedTitle=3rd Party Scripts
3rd.party.scripts.desc=Connecting to 3rd party content can create slowdowns in your app. If these external files fail to load, you can have a huge effect on the customer experience and load times. Consider loading these in an asynchronous manner.
3rd.party.scripts.results=ARO discovered&nbsp;<a href="#">{0}</a>&nbsp;pages with at least two external scripts called.
3rd.party.scripts.pass=Your trace passes.
3rd.party.scripts.url=http://developer.att.com/ARO/BestPractices/3rdPartyScripts

spriteimages.title=File Download: Use CSS Sprites for Images
spriteimages.detailedTitle=Use CSS Sprites for Images
spriteimages.desc=Small images can be combined into Sprites, and then rendered with CSS. This  will reduce the number of HTTP requests and speed the loading of your app.
spriteimages.results=ARO discovered {0} groups of small images downloaded at once. By grouping into one image and using sprites, downloads are streamlined, and files render more quickly.
spriteimages.pass=Your trace passes.
spriteimages.url=http://developer.att.com/ARO/BestPractices/CSSsprites
spriteimages.table.header=Files 
spriteimages.table.col1=Time
spriteimages.table.col2=Host Name
spriteimages.table.col3=File Size
spriteimages.table.col4=File Name

combinejscss.title=File Download: Combine JS and CSS Requests
combinejscss.detailedTitle=Combine JS and CSS Requests
combinejscss.desc=Multiple requests for CSS or JS can slow loading. Whenever possible, combine into as few files as possible.
combinejscss.results=In this trace, we see <a href="#">multiple CSS or Javascript</a>&nbsp;requests within 2 seconds of one another. Consider combining these files into one to reduce the number of requests, and thus reducing the latency to render the webpage.&nbsp;
combinejscss.pass=ARO found no issues with multiple CSS requests nor with multiple JavaScript requests.
combinejscss.url=http://developer.att.com/ARO/BestPractices/CombineJSandCSS

bestPractices.header.result=ARO Best Practices Results
bestPractices.header.summary=SUMMARY
bestPractices.header.statistics=TEST STATISTICS
bestPractices.header.testsConducted=TESTS CONDUCTED
bestPractices.header.cache=USING CACHE & CACHING PROBLEMS
bestPractices.header.cacheDescription=By utilizing a local cache on the device, content used more than once will be delivered instantly without a download delay.
bestPractices.header.connections=CONNECTIONS
bestPractices.header.connectionsDescription=Optimizing how you use the device's radio will speed the delivery of content and reduce your application's battery consumption.
bestPractices.header.others=OTHERS
bestPractices.header.othersDescription=Reducing the usage of device peripherals and optimizing your HTTP connectivity can further reduce your application's battery consumption.
bestPractices.header.fileDownload=FILE DOWNLOAD
bestPractices.header.fileDownloadDescription=Reducing the usage of network for file downloads can reduce your application's battery consumption.
bestPractices.header.html=HTML
bestPractices.header.htmlDescription=Reducing the usage of device peripherals and optimizing your HTTP connectivity can further reduce your application's battery consumption.

bestPractices.header.page=Page {0}

bestPractices.pass=PASS
bestPractices.fail=FAIL
bestPractices.warning=WARNING

bestPractices.date=Date:
bestPractices.trace=Trace:
bestPractices.application=Application(s) Name : Version:
bestPractices.applicationversion=Data Collector Version:
bestPractices.devicemodel=Device Make/Model:
bestPractices.devicemodelvalue={0} / {1}
bestPractices.os.version=OS/Platform Version:
bestPractices.networktype=Network Type(s):
bestPractices.profile=Profile:
bestPractices.sideTitle=Application Resource Optimizer
bestPractices.duration=Duration:
bestPractices.durationValue={0} minutes
bestPractices.totalDataTransfered=Total Data Transferred: 
bestPractices.totalDataTransferedValue={0} bytes
bestPractices.videoData=Video Data:
bestPractices.energyConsumed=Energy Consumed:
bestPractices.TotalHTTPSData=Total HTTPS data:
bestPractices.TotalHTTPSDataValue= {0} ({1} KB)
bestPractices.HTTPSDataAnalyzed=HTTPS data analyzed:
bestPractices.HTTPSDataAnalyzedValue= {0} ({1} KB)
bestPractices.HTTPSDataNotAnalyzed=HTTPS data not analyzed:
bestPractices.HTTPSDataNotAnalyzedValue= {0} ({1} KB)
bestPractices.causesScore=Causes:
bestPractices.effectsScore=Effects:
bestPractices.totalAppScore=Total:
bestPractices.outofscore1= (out of 500)
bestPractices.outofscore2= (out of 1000)
bestPractices.outofscore3= (out of 50)
bestPractices.outofscore4= (out of 75)
bestPractices.outofscore5= (out of 150)
bestPractices.outofscore6= (out of 125)
bestPractices.outofscore7= (out of 62.5)
bestPractices.outofscore8= (out of 187.5)
bestPractices.scoreref=<a href="#">{0}</a>&nbsp;
bestPractices.energyConsumedValue={0} J (Energy)
bestPractices.test=Test:
bestPractices.About=About:
bestPractices.results=Results:
bestPractices.selfEvaluation=Self Evaluation:
bestPractices.selfTest=Self Test
bestPractices.learnMore=Learn more...
bestPractice.referSection=Refer to Section on {0}.
bestPractice.referSection.caching=File Download
bestPractice.referSection.connections=connections
bestPractice.referSection.others=others
bestPractice.referSection.fileDownload=File Download
bestPractice.referSection.html=HTML
bestPractice.tooltip.pass=Pass
bestPractice.tooltip.fail=Fail
bestPractice.tooltip.warning=Warning
bestPractice.tooltip.manual=Self Test


Export.header.tracesummary=======TRACE SUMMARY=========
Export.header.filetypes=============FILE TYPES=========
Export.header.traceoverview=============TRACE BENCHMARKING=========
Export.header.connectionstatistics=============CONNECTION STATISTICS============
exportall.csvHeader.bestpractice===========BEST PRACTICES==========
exportall.csvPercentageHTTPSNotAnalyzedValue={0}
exportall.csvByteHTTPSNotAnalyzedValue=({0} KB)
exportall.csvPercentageHTTPSAnalyzedValue={0}
exportall.csvByteHTTPSAnalyzedValue=({0} KB)
exportall.csvPercentagetotalHTTPSValue={0}
exportall.csvBytetotalHTTPSValue=({0} KB)
exportall.csvPct=% duplicated TCP content
exportall.csvFiles=files
exportall.csvCacheConPct=% of files missing cache headers
exportall.csvCacheConNExpDesc=files downloaded multiple times while "not expired"
exportall.csvCacheCon304Desc=files cached and 304 returned from server
exportall.csvInefficientCssRequests=count of inefficient Css requests
exportall.csvInefficientJsRequests=count of inefficient Js requests
exportall.csvMultiConnDesc=count of bursts more tightly grouped
exportall.csvIneffConnDesc=connections
exportall.csvIneffConnRptDesc=# of repeats
exportall.csvIneffConnTimeDesc=s period of repeat
exportall.csvConnClosingDesc=joules was used to control these connections
exportall.csvPrefetchDesc=user input burst in a row
exportall.csvResizeImageDesc=count of images larger than 150% of area specified for them
exportall.csvSrcnRtnDesc=count of screen rotations that cause network activity
exportall.csvSrcnRtnDescPass=count of screen rotations
exportall.csvOffWiFiDesc=number of large bursts
exportall.csvHttpError=HTTP {0} response code(s)
exportall.csvAccGPSDesc=% GPS
exportall.csvAccBTDesc=% Bluetooth
exportall.csvAccCamDesc=% Camera
exportall.csvHTTPhdrDesc=count of HTTP 1.0 headers
exportall.csvTextFileCompression= text file(s) above {0} bytes were sent without compression
exportall.csvTextFileCompressionKb=kB of text files were sent without compression
exportall.csvNumberOfLargeImages=images larger than the area specified for them
exportall.csvNumberOfFilesWithDisplayNone=files with "display:none" CSS rule
exportall.csvNumberOfMinifyFiles=files to minify
exportall.csvNumberOfEmptyUrlFiles=empty HTML tag files
exportall.csvNumberOfFlashFiles=flash files
exportall.csvNumberOfScriptFiles=3rd party script files
exportall.csvNumberOfSpriteFiles=Image file groups to be used a sprite
exportall.csvNumberOfSmallRequest=Small requests to be minimized
exportall.errorFileOpen=ARO Analyzer not able to export a file : 
exportall.errorLongFileName=File name entered is very long. Please enter file name less than 50 characters.
exportall.csvSyncPacketCount=HTML files that uses synchronous load of JavaScript in the HEAD.
exportall.csvAsyncPacketCount=HTML files that uses asynchronous load of JavaScript in the HEAD.
exportall.csvFileOrderCount=HTML files which have JS loaded before CSS in the HEAD.
exportall.causesScore=Causes:
exportall.effectsScore=Effects:
exportall.totalAppScore=Total:
overview.traceoverview.value=Value
overview.traceoverview.percentile=Percentile
Export.traceoverview.throughput=Avg Rate: (kbps)
Export.traceoverview.jpkb=Energy Efficiency: (J/kb)
Export.traceoverview.promoratio=Signaling Overhead:
Export.sessionoverview.sessionTerm=Proper session termination
Export.sessionoverview.longBurstTerm=Large Burst connection
Export.sessionoverview.tightlyGroupedBurstTerm=Tightly grouped connection
Export.sessionoverview.periodicBurstTerm=Periodic Burst connection
Export.sessionoverview.nonPeriodicBurstTerm=Non-Periodic Burst connection
